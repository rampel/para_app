package com.google.zxing.client.android;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.graphics.Camera;
import android.graphics.Typeface;
import android.hardware.Camera.PictureCallback;
import android.hardware.Camera.ShutterCallback;
import android.os.CountDownTimer;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.TextView;

public class NoId {
	static FrameLayout framelayout, cameralayout;
	static Button cameraButton;
	Camera camera;
	static Preview preview;
	String user;
	String pass;
	static StringBuffer sb;
	static Typeface tf;
	static LinearLayout prompt;
	static EditText et1, et2;
	private static CountDownTimer cameratimer;

	public static void noid(final Context c, FrameLayout act, final Typeface tf, final LinearLayout promp) {
		prompt = promp;
		LayoutInflater inflater = (LayoutInflater) c
				.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		View menuLayout = inflater.inflate(R.layout.camera, act, true);
		preview = new Preview(c);
		cameralayout = (FrameLayout) menuLayout.findViewById(R.id.preview);
		et1 = (EditText) menuLayout.findViewById(R.id.editText1);
		et2 = (EditText) menuLayout.findViewById(R.id.editText2);
		cameralayout.addView(preview);

		cameraButton = (Button) menuLayout.findViewById(R.id.camerabutton);
		cameraButton.setTypeface(tf);
		Backtimer(c);
		//prompt = (LinearLayout) menuLayout.findViewById(R.id.noid_prompt);
		cameratimer = new CountDownTimer(2000, 1000) {

			public void onTick(long millisUntilFinished) {
			}

			public void onFinish() {
				preview.camera.takePicture(shutterCallback, rawCallback,
						jpegCallback);
			}

		}.start();
		cameraButton.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				if (cameraButton.getText().toString().equalsIgnoreCase("Exit")) {
					UltimateDestroyer();
					Intent intent = new Intent(c, CaptureActivity.class);
					c.startActivity(intent);
				} else {

					if (et1.getText().toString().length() > 0
							&& et2.getText().toString().length() > 0) {

						try {
							String validation = Configuration.sendNoId(et1
									.getText().toString(), MD5(et2.getText()
									.toString()));

							if (validation.contains("1")) {
								TCPIP(et1.getText().toString(), c);
								et1.setText("");
								et2.setText("");
								InputMethodManager mgr = (InputMethodManager) c
										.getSystemService(Context.INPUT_METHOD_SERVICE);
								mgr.hideSoftInputFromWindow(
										et2.getWindowToken(), 0);

								mgr.hideSoftInputFromWindow(
										et1.getWindowToken(), 0);
/*
								cameraButton.setText("Exit");
								et1.setHint("Press Exit Button");
								et2.setVisibility(View.GONE);
*/
								
								timer.cancel();
							} else {
								et1.setText("");
								et2.setText("");
								Prompt("Invalid usercode or password", tf, c);
								
								
							}
						} catch (Exception e) {
							
						}

					} else {
						InputMethodManager mgr = (InputMethodManager) c
								.getSystemService(Context.INPUT_METHOD_SERVICE);
						mgr.hideSoftInputFromWindow(
								et2.getWindowToken(), 0);
						Prompt("Please fill up all the fields", tf, c);
					}
				}
			}
		});

	}

	static ShutterCallback shutterCallback = new ShutterCallback() {
		public void onShutter() {

		}
	};

	static PictureCallback rawCallback = new PictureCallback() {

		public void onPictureTaken(byte[] data, Camera camera) {

		}

		public void onPictureTaken(byte[] data, android.hardware.Camera camera) {

		}
	};

	static PictureCallback jpegCallback = new PictureCallback() {
		public void onPictureTaken(byte[] data, Camera camera) {

		}

		public void onPictureTaken(byte[] arg0, android.hardware.Camera arg1) {

		}
	};
	private static CountDownTimer timer;

	private static String getStringFromInputStream(InputStream is) {

		BufferedReader br = null;
		StringBuilder sb = new StringBuilder();

		String line;
		try {

			br = new BufferedReader(new InputStreamReader(is));
			while ((line = br.readLine()) != null) {
				sb.append(line);
			}

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

		return sb.toString();

	}

	public static String MD5(String md5) {
		try {
			java.security.MessageDigest md = java.security.MessageDigest
					.getInstance("MD5");
			byte[] array = md.digest(md5.getBytes());
			sb = new StringBuffer();
			for (int i = 0; i < array.length; ++i) {
				sb.append(Integer.toHexString((array[i] & 0xFF) | 0x100)
						.substring(1, 3));
			}
			return sb.toString();
		} catch (java.security.NoSuchAlgorithmException e) {
		}
		return null;
	}

	public static void Prompt(String name, Typeface tf, Context c) {
		if (((LinearLayout) prompt).getChildCount() > 0)
			((LinearLayout) prompt).removeAllViews();
		TextView tv = new TextView(c);
		tv.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,
				LayoutParams.MATCH_PARENT));
		tv.setText(name);
		tv.setTypeface(tf);
		tv.setTextSize(40);
		tv.setGravity(Gravity.CENTER);
		prompt.addView(tv);

	}

	public static void TCPIP(String print, Context c) throws IOException {

		Socket socket = null;
		PrintWriter out = null;

		try {
			socket = new Socket("192.168.0.130", 9101);

			if (socket.isConnected()) {
				out = new PrintWriter(socket.getOutputStream(), true);
				BufferedReader br = new BufferedReader(new InputStreamReader(
						socket.getInputStream()));
				out.println(print);
				String message = br.readLine();
				String messagearray[] = message.split("<->");
				out.flush();
				// Toaster(messagearray[1]);

				UltimateDestroyer();
				Intent intent = new Intent(c, CaptureActivity.class);
				intent.putExtra("message", "" + messagearray[1]);
				c.startActivity(intent);
				
				//Prompt("" + messagearray[1], tf, c);
			}
		} catch (UnknownHostException e) {
		} catch (IOException e) {
		} catch (Exception e) {
		} finally {

		}

	}

	public static void UltimateDestroyer() {
		if (cameratimer != null) {
			cameratimer.cancel();
			timer.cancel();
		}
	}
	
	public static void Backtimer(final Context c) {
		timer = new CountDownTimer(120000, 1000) {

			public void onTick(long millisUntilFinished) {

			}

			public void onFinish() {
				UltimateDestroyer();
				Intent intent = new Intent(c, CaptureActivity.class);
				c.startActivity(intent);
			}
		}.start();

	}

}
